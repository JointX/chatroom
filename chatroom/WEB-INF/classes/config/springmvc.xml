<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd">
		
		
		<!--配置我们自定义的处理业务的Handler____________________________________________________-->
			<bean id="myHandler" name="/myHandler.action" class="ssm.lzj.handler.MyHandler"></bean>
			<bean id="myHandler3" name="/myHandler3.action" class="ssm.lzj.handler.MyHandler1"></bean>
			<!-- <bean class="ssm.lzj.handler.MyHandler2"></bean> -->
			<!--由于考虑到自己配置自定义的处理器手动注入太过繁琐，springmvc框架为我们提供了自动包扫描注入  -->
			<context:component-scan base-package="ssm.lzj.handler"></context:component-scan>
		
		<!--配置框架要使用的处理器映射器 _________________________________________________________ -->
			<!--第一种非注解的处理器映射器  BeanNameUrlHandlerMapping,用法是寻找我们配置的Handler的name属性-->
			<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>
			<!--第二种非注解的处理器映射器,SimpleUrlHandlerMapping，这样可以把我们的Handler集中管理，它是用id来映射我们
				自定义的handler.
			  -->
			<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
				<property name="mappings">
					<props>
						<prop key="/myHandler1.action">myHandler</prop>
						<prop key="/myHandler2.action">myHandler</prop>
					</props>
				</property>
			</bean>
			<!--第一种注解的处理器映射器，spring3.1之前，org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.class  -->
			<!--第二种注解的处理器映射器， org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.class -->
			<!-- mvc:annotation-driven<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean> -->
			
			
		<!--配置框架要使用的处理器适配器 ______________________________________________________ -->
			<!--第一种非注解的处理器适配器,SimpleServletHandlerAdapter,它的用法是需要我们自定义的handler实现Controller接口 -->
			<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
			<!--第二种非注解的处理器适配器， HttpRequestHandlerAdapter,它的用法需要我们自定义的handler实现HttpRequestHandler接口。-->
			<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>
			<!--第一种注解的处理器适配器，spring3.1之前org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.class -->
			<!--第二种注解的处理器适配器，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.class  -->
			<!--由mvc:annotation-driven代替： <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean> -->
		<!--开启注解 配置驱动，mvc:annotation-driven这个标签内部已经包含了，注解处理器映射器，和注解处理器适配器的配置，还有一些其它的绑定参数，所以我们可以不用配置上面的注解类型的映射器和适配器-->
			<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
		
		<!--配置自定义参数类型转换，管理类型转换的组件是由HandlerAdapter，而我们用了 mvc:annotation-driven代替了
		配置注解类型的处理器适配器，所以我们自定义的转换器怎么添加进类型转换组件呢？
		mvc:annotation-driven为我们提供了一项属性，我们只要自己定义好的类型转换类添加进这个属性，标签mvc:annotation-driven开启就自动加载
		我们自定义的类转换组件进如，springmvc框架的类型转换组件行列。
		 -->
			<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
				<!--FormattingConversionServiceFactoryBean 
				框架为们提供的接口的list属性List<object> converters-->
				<property name="converters">
					<list>
						<!-- 这个是批量进入我们自定义的类型转换类-->
						<bean class="ssm.lzj.converter.MyDateConverter"></bean>
					</list>
				</property>
			</bean>
		<!--配置框架要使用的视图解析器 _______________________________________________________ -->
			<!--第一个视图解析器InternalResourceViewResolver,不同的view解析器也需要对应-->
			<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<!--prefix前缀，suffix后缀，主要是简化我们映射转发的jsp的地址  -->
				<property name="prefix" value="/WEB-INF/jsp/"></property>
				<property name="suffix" value=".jsp"></property>
			</bean>
		<!--校验组件的配置：springmvc自身没有校验框架，我们配置hibernate的一个校验架构，由于校验组件也是由
		HandlerAdapter来负责的，但是我们使用了注解驱动去加载注解类型处理器适配器，也通过给注解驱动标签加上validator属性来添加校验组件。
		。  -->
		<!--  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
			hibernate的校验组件 
			<property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
			指定校验错误的提示信息文件
			<property name="validationMessageSource" ref="messageSource"></property>
		</bean>
		<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
			资源名
			<property name="basenames">
				<list>
					<value>classpath:config/messageErrors</value>
				</list>
			</property>
			配置资源文件编码 
			<property name="fileEncodings" value="utf-8"></property>
			配置资源文件多少秒从缓存中刷新一次 
			<property name="cacheSeconds" value="300"></property>
		</bean>  -->
		
		<!--配置全局的异常处理 ,它存在的意义在于，不给客户看异常信息，异常信息都有自己定义的异常处理器来截获，转发到一个友好的页面。-->
		<!--因为我们定义的异常处理类，实现了org.springframework.web.servlet.HandlerExceptionResolver,所以只要注入，springmvc就会替换原来的异常处理器-->
		<!-- <bean class="ssm.lzj.exception.MyExceptionHandler"></bean> -->
		
		<!--配置文件上传的处理器  -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxInMemorySize">
				<value>52428880</value>
			</property>
			<property name="defaultEncoding" value="utf-8"></property>
		</bean>
		
		<!--配置静态资源映射，当使用RestFul风格的URL的时候，前端控制去DispatcherServlet的映射需要为/,那么一些静态资源
		也会被当作action来解析，那么静态资源将无法访问，所以需要在springmvc中做一个映射，也可以在web.xml文件中单个映射。
		  -->
		  <mvc:resources location="/WEB-INF/jsp/login.jsp" mapping="login"/>
		  
		  <!--配置拦截器，拦截器也是处理器适配器器的组件，我们使用注解驱动注入的适配器，没法注入，可以使用标签来注入自定义的拦截器  -->
		  <mvc:interceptors>
		  	<mvc:interceptor>
		  		<!--springmvc的拦截器是针对HandlerMapping来工作，也就是对特定的URL进行拦截 -->
		  		<!--/** 和/*的区别，前者是所有的url都进行拦截，/*当前一层 -->
		  		<mvc:mapping path="/toAddItemView"/>
		  		<bean class="ssm.lzj.interceptor.MyInterceptor"/>
		  	</mvc:interceptor>
		  </mvc:interceptors>
		
</beans>
